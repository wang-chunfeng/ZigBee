###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Feb/2021  12:24:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg         #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg            #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\ABC\Desktop\3.¹ã²¥ #
#                          ×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c -D ZTOOL_P1 -D  #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\ABC\Desktop\3.¹ã² #
#                          ¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB\List\ -lA       #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB\List\ --diag_suppress Pe001,Pa010 -o    #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB\Obj\ -e --no_code_motion --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\ABC\Desktop\3.¹ã² #
#                          ¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\ -I                      #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞ #
#                          ÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I      #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\ -I        #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\include\ -I     #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\ -I     #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\   #
#                          -I C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\ -I C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-Î #
#                          ÞÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mt\   #
#                          -I C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\ -I     #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\ -I     #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\ -I           #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\ -I          #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\ -I         #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\ -I          #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\ -I          #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\ -I               #
#                          C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB\List\SampleApp.lst                      #
#    Object file        =  C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStac #
#                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB\Obj\SampleApp.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ABC\Desktop\3.¹ã²¥×éÍø-ÎÞÏßÊý¾Ý´«Êä\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h" 
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          uint8 AppTitle[] = "ALD Broadcast"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I
     94          
     95          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     96          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     97          {
     98            SAMPLEAPP_PERIODIC_CLUSTERID,
     99            SAMPLEAPP_FLASH_CLUSTERID
    100          };
    101          

   \                                 In  segment XDATA_ROM_C, align 1
    102          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    103          {
    104            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    105            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    106            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    107            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    108            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    109            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    113          };
    114          
    115          // This is the Endpoint/Interface description.  It is defined here, but
    116          // filled-in in SampleApp_Init().  Another way to go would be to fill
    117          // in the structure here and make it a "const" (in code space).  The
    118          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133                                    // This variable will be received when
    134                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Periodic_DstAddr;//¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleAPP_Point_To_Point_DstAddr;//µã²¥
   \                     SampleAPP_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    152          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    153          void SampleApp_SendPeriodicMessage( void );
    154          void SampleApp_SendFlashMessage( uint16 flashTime );
    155          void SampleApp_SendPointToPointMessage( void);
    156          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    157          void Delay(uint32 i);
    158          
    159          /*********************************************************************
    160           * NETWORK LAYER CALLBACKS
    161           */
    162          
    163          /*********************************************************************
    164           * PUBLIC FUNCTIONS
    165           */
    166          
    167          /*********************************************************************
    168           * @fn      SampleApp_Init
    169           *
    170           * @brief   Initialization function for the Generic App Task.
    171           *          This is called during initialization and should contain
    172           *          any application specific initialization (ie. hardware
    173           *          initialization/setup, table initialization, power up
    174           *          notificaiton ... ).
    175           *
    176           * @param   task_id - the ID assigned by OSAL.  This ID should be
    177           *                    used to send messages and set timers.
    178           *
    179           * @return  none
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    182          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    183            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    184            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    185            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    186            
    187            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    188            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    189            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//ÌáÊ¾ÐÅÏ¢
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0D         MOV     R4,#0xd
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    190            
    191            // Device hardware initialization can be added here or in main() (Zmain.c).
    192            // If the hardware is application specific - add it here.
    193            // If the hardware is other parts of the device add it in main().
    194          
    195           #if defined ( BUILD_ALL_DEVICES )
    196            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    197            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    198            // together - if they are - we will start up a coordinator. Otherwise,
    199            // the device will start as a router.
    200            if ( readCoordinatorJumper() )
    201              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    202            else
    203              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    204          #endif // BUILD_ALL_DEVICES
    205          
    206          #if defined ( HOLD_AUTO_START )
    207            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    208            //  from starting the device and wait for the application to
    209            //  start the device.
    210            ZDOInitDevice(0);
    211          #endif
    212          
    213            // Setup for the periodic message's destination address
    214            // Broadcast to everyone
    215            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
    216            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC     DPTR
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    217            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    218          
    219            // Setup for the flash command's destination address - Group 1
    220            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    221            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    222            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    223            
    224            //point to point 
    225            SampleAPP_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)afAddr16Bit;
   \   000050   90....       MOV     DPTR,#SampleAPP_Point_To_Point_DstAddr + 8
   \   000053   7402         MOV     A,#0x2
   \   000055   F0           MOVX    @DPTR,A
    226            SampleAPP_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000056   A3           INC     DPTR
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    227            SampleAPP_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;//·¢ËÍ¸øÐ­µ÷Æ÷
   \   00005A   90....       MOV     DPTR,#SampleAPP_Point_To_Point_DstAddr
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
    228            
    229            
    230            // Fill out the endpoint description.
    231            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000061   90....       MOV     DPTR,#SampleApp_epDesc
   \   000064   7414         MOV     A,#0x14
   \   000066   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006E   F0           MOVX    @DPTR,A
    233            SampleApp_epDesc.simpleDesc
    234                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    236          
    237            // Register the endpoint description with the AF
    238            afRegister( &SampleApp_epDesc );
   \   00007A                ; Setup parameters for call to function afRegister
   \   00007A   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007C   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007E   12....       LCALL   ??afRegister?relay
    239          
    240            // Register for all key events - This app will handle all key events
    241            RegisterForKeys( SampleApp_TaskID );
   \   000081                ; Setup parameters for call to function RegisterForKeys
   \   000081   90....       MOV     DPTR,#SampleApp_TaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??RegisterForKeys?relay
    242          
    243            // By default, all devices start out in Group 1
    244            SampleApp_Group.ID = 0x0001;
   \   000089   90....       MOV     DPTR,#SampleApp_Group
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    245            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000095   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   7C07         MOV     R4,#0x7
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A5   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A7   12....       LCALL   ??osal_memcpy?relay
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    246            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AF                ; Setup parameters for call to function aps_AddGroup
   \   0000AF   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B1   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B3   7914         MOV     R1,#0x14
   \   0000B5   12....       LCALL   ??aps_AddGroup?relay
    247          
    248          #if defined ( LCD_SUPPORTED )
    249            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B8                ; Setup parameters for call to function HalLcdWriteString
   \   0000B8   7900         MOV     R1,#0x0
   \   0000BA   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BC   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BE   12....       LCALL   ??HalLcdWriteString?relay
    250          #endif
    251          }
   \   0000C1   7F03         MOV     R7,#0x3
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    252          
    253          /*********************************************************************
    254           * @fn      SampleApp_ProcessEvent
    255           *
    256           * @brief   Generic Application Task event processor.  This function
    257           *          is called to process all events for the task.  Events
    258           *          include timers, messages and any other user defined events.
    259           *
    260           * @param   task_id  - The OSAL assigned task ID.
    261           * @param   events - events to process.  This is a bit map and can
    262           *                   contain more than one event.
    263           *
    264           * @return  none
    265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    267          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    268            afIncomingMSGPacket_t *MSGpkt;
    269            (void)task_id;  // Intentionally unreferenced parameter
    270          
    271            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    272            {
    273              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    274              while ( MSGpkt )
    275              {
    276                switch ( MSGpkt->hdr.event )
    277                {        
    278                  // Received when a key is pressed
    279                  case KEY_CHANGE:
    280                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    281                    break;
    282          
    283                  // Received when a messages is received (OTA) for this endpoint
    284                  case AF_INCOMING_MSG_CMD:
    285                    SampleApp_MessageMSGCB( MSGpkt );
    286                    break;
    287          
    288                  // Received whenever the device changes state in the network
    289                  case ZDO_STATE_CHANGE:
    290                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    291                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    292                           (SampleApp_NwkState == DEV_ROUTER)
    293                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    294                    {
    295                      // Start sending the periodic message in a regular interval.
    296                      osal_start_timerEx( SampleApp_TaskID,
    297                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    298                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CB8         MOV     R4,#-0x48
   \   000020   7D0B         MOV     R5,#0xb
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    299                    }
    300                    else
    301                    {
    302                      // Device is no longer in the network
    303                    }
    304                    break;
    305          
    306                  default:
    307                    break;
    308                }
    309          
    310                // Release the memory
    311                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    312          
    313                // Next - if one is available
    314                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    315              }
    316          
    317              // return unprocessed events
    318              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    319            }
    320          
    321            // Send a message out - This event is generated by a timer
    322            //  (setup in SampleApp_Init()).
    323            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )//¼ä¸ô·¢ËÍÏûÏ¢ÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    324            {
    325              // Send the periodic message£¬¹ã²¥
    326              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    327              //SampleApp_SendPointToPointMessage();µã²¥
    328          
    329              // Setup to send message again in normal period (+ a little jitter)
    330              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    331                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24B8         ADD     A,#-0x48
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   340B         ADDC    A,#0xb
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    332          
    333              // return unprocessed events
    334              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    335            }
    336          
    337            // Discard unknown events
    338            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    339          }
    340          
    341          /*********************************************************************
    342           * Event Generation Functions
    343           */
    344          /*********************************************************************
    345           * @fn      SampleApp_HandleKeys
    346           *
    347           * @brief   Handles all key events for this device.
    348           *
    349           * @param   shift - true if in shift/alt.
    350           * @param   keys - bit field for key events. Valid entries:
    351           *                 HAL_KEY_SW_2
    352           *                 HAL_KEY_SW_1
    353           *
    354           * @return  none
    355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    356          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    357          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    358            (void)shift;  // Intentionally unreferenced parameter
    359            
    360            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    361            {
    362              /* This key sends the Flash Command is sent to Group 1.
    363               * This device will not receive the Flash Command from this
    364               * device (even if it belongs to group 1).
    365               */
    366              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    367            }
    368          
    369            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    370            {
    371              /* The Flashr Command is sent to Group 1.
    372               * This key toggles this device in and out of group 1.
    373               * If this device doesn't belong to group 1, this application
    374               * will not receive the Flash command sent to group 1.
    375               */
    376              aps_Group_t *grp;
    377              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    378              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    379              {
    380                // Remove from the group
    381                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    382              }
    383              else
    384              {
    385                // Add to the flash group
    386                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    387              }
    388            }
    389          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    390          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          void Delay(uint32 i)
   \                     Delay:
    392          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    393            while(i--);
   \                     ??Delay_0:
   \   00000D   85....       MOV     ?V0 + 4,?V0 + 0
   \   000010   85....       MOV     ?V0 + 5,?V0 + 1
   \   000013   85....       MOV     ?V0 + 6,?V0 + 2
   \   000016   85....       MOV     ?V0 + 7,?V0 + 3
   \   000019   90....       MOV     DPTR,#__Constant_ffffffff
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?L_ADD_X
   \   000021   E5..         MOV     A,?V0 + 4
   \   000023   45..         ORL     A,?V0 + 5
   \   000025   45..         ORL     A,?V0 + 6
   \   000027   45..         ORL     A,?V0 + 7
   \   000029   70E2         JNZ     ??Delay_0
    394          }
   \   00002B   7F08         MOV     R7,#0x8
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    395          /*********************************************************************
    396           * LOCAL FUNCTIONS
    397           */
    398          
    399          /*********************************************************************
    400           * @fn      SampleApp_MessageMSGCB
    401           *
    402           * @brief   Data message processor callback.  This function processes
    403           *          any incoming data - probably from other devices.  So, based
    404           *          on cluster ID, perform the intended action.
    405           *
    406           * @param   none
    407           *
    408           * @return  none
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt ) //½ÓÊÕÊý¾Ý
   \                     SampleApp_MessageMSGCB:
    411          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    412            uint16 flashTime;
    413            int8 count;
    414            int8 rssi_buf[3];
    415            switch ( pkt->clusterId )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    416            {
    417              case SAMPLEAPP_PERIODIC_CLUSTERID://ÊÕµ½¹ã²¥Êý¾Ý
    418                count=~(pkt->rssi-1);//×ª»»ÎªÔ­Âë
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B   EE           MOV     A,R6
   \   00002C   2418         ADD     A,#0x18
   \   00002E   F582         MOV     DPL,A
   \   000030   EF           MOV     A,R7
   \   000031   3400         ADDC    A,#0x0
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   14           DEC     A
   \   000037   F4           CPL     A
   \   000038   F5..         MOV     ?V0 + 0,A
    419                rssi_buf[0]='-';//ÐÅºÅÇ¿¶ÈÒ»¶¨Îª¸ºÊý
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   742D         MOV     A,#0x2d
   \   000042   F0           MOVX    @DPTR,A
    420                rssi_buf[1]=count/10+0x30;
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   75F00A       MOV     B,#0xa
   \   000048   12....       LCALL   ?SC_DIV_MOD
   \   00004B   2430         ADD     A,#0x30
   \   00004D   C0E0         PUSH    A
   \   00004F   7401         MOV     A,#0x1
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
    421                rssi_buf[2]=count%10+0x30;
   \   000057   E5..         MOV     A,?V0 + 0
   \   000059   75F00A       MOV     B,#0xa
   \   00005C   12....       LCALL   ?SC_DIV_MOD
   \   00005F   E5F0         MOV     A,B
   \   000061   2430         ADD     A,#0x30
   \   000063   C0E0         PUSH    A
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
    422                HalUARTWrite(0,"rssi:",5);
   \   00006D                ; Setup parameters for call to function HalUARTWrite
   \   00006D   7C05         MOV     R4,#0x5
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7A..         MOV     R2,#`?<Constant "rssi:">` & 0xff
   \   000073   7B..         MOV     R3,#(`?<Constant "rssi:">` >> 8) & 0xff
   \   000075   7900         MOV     R1,#0x0
   \   000077   12....       LCALL   ??HalUARTWrite?relay
    423                HalUARTWrite(0,rssi_buf,3); 
                                      ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "unsigned char *"
   \   00007A                ; Setup parameters for call to function HalUARTWrite
   \   00007A   7C03         MOV     R4,#0x3
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   AA82         MOV     R2,DPL
   \   000086   AB83         MOV     R3,DPH
   \   000088   7900         MOV     R1,#0x0
   \   00008A   12....       LCALL   ??HalUARTWrite?relay
    424                HalUARTWrite(0,"     ",5); 
   \   00008D                ; Setup parameters for call to function HalUARTWrite
   \   00008D   7C05         MOV     R4,#0x5
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   7A..         MOV     R2,#`?<Constant "     ">` & 0xff
   \   000093   7B..         MOV     R3,#(`?<Constant "     ">` >> 8) & 0xff
   \   000095   7900         MOV     R1,#0x0
   \   000097   12....       LCALL   ??HalUARTWrite?relay
    425                if(count<30)//µ±½Ó½üµ½·Ç°²È«¾àÀë
   \   00009A   E5..         MOV     A,?V0 + 0
   \   00009C   C3           CLR     C
   \   00009D   941E         SUBB    A,#0x1e
   \   00009F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000A1   65D0         XRL     A,PSW
   \   0000A3   33           RLC     A
   \   0000A4   5059         JNC     ??SampleApp_MessageMSGCB_0
    426                {
    427                   Delay(30000);//ÊÇ·ñÍ£Áô
   \   0000A6                ; Setup parameters for call to function Delay
   \   0000A6   90....       MOV     DPTR,#__Constant_7530
   \   0000A9   12....       LCALL   ?XLOAD_R2345
   \   0000AC   12....       LCALL   ??Delay?relay
    428                   if(count<30)
    429                   {
    430                      HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   0000AF                ; Setup parameters for call to function HalUARTWrite
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2420         ADD     A,#0x20
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FC           MOV     R4,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FD           MOV     R5,A
   \   0000BE   12....       LCALL   ?Subroutine1 & 0xFFFF
    431                   }
    432                }
   \                     ??CrossCallReturnLabel_0:
   \   0000C1   FA           MOV     R2,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FB           MOV     R3,A
   \   0000C5   7900         MOV     R1,#0x0
   \   0000C7   12....       LCALL   ??HalUARTWrite?relay
   \   0000CA   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000CC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000CF   F8           MOV     R0,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3                ; Setup parameters for call to function HalLedBlink
   \   0000D3   8882         MOV     DPL,R0
   \   0000D5   8983         MOV     DPH,R1
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FA           MOV     R2,A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   2400         ADD     A,#0x0
   \   0000E5   F5..         MOV     ?V0 + 0,A
   \   0000E7   E4           CLR     A
   \   0000E8   39           ADDC    A,R1
   \   0000E9   F5..         MOV     ?V0 + 1,A
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?US_SHR
   \   0000F2   AC..         MOV     R4,?V0 + 0
   \   0000F4   AD..         MOV     R5,?V0 + 1
   \   0000F6   7B32         MOV     R3,#0x32
   \   0000F8   7A04         MOV     R2,#0x4
   \   0000FA   7908         MOV     R1,#0x8
    433                break;
    434              case SAMPLEAPP_FLASH_CLUSTERID:     //ÊÕµ½×é²¥Êý¾Ý£¬´ËÊµÑéÃ»ÓÐÊ¹ÓÃ£¬µ½ºóÃæÊµÑéÏê½â
    435                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    436                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   0000FC   12....       LCALL   ??HalLedBlink?relay
    437                break;
    438            case  SAMPLEAPP_POINT_TO_POINT_CLUSTERID ://µã²¥,Ð­µ÷Æ÷ÊÕµ½µã²¥ÊÇÊý¾Ý½«·¢À´ÊÇÊý¾Ý½ÚµãID¼Ó½Ó´¥µÄID´ò°üÊä³öµ½´®¿Ú
    439                
    440                break;
    441            }
    442          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000FF   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine2_0
   \   000002                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0
    443          
    444          /*********************************************************************
    445           * @fn      SampleApp_SendPeriodicMessage
    446           *
    447           * @brief   Send the periodic message.
    448           *
    449           * @param   none
    450           *
    451           * @return  none
    452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    454          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    455            uint8 ID=0x01;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    456            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    457                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    458                                 1,
    459                                 &ID,
    460                                 &SampleApp_TransID,
    461                                 AF_DISCV_ROUTE,
    462                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000013                ; Setup parameters for call to function AF_DataRequest
   \   000013   75..1E       MOV     ?V0 + 0,#0x1e
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001B   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00001E   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   8582..       MOV     ?V0 + 0,DPL
   \   00002E   8583..       MOV     ?V0 + 1,DPH
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0 + 0,#0x1
   \   000039   75..00       MOV     ?V0 + 1,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7920         MOV     R1,#0x20
   \   000048   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00004A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00004C   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00004E   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000050   12....       LCALL   ??AF_DataRequest?relay
   \   000053   7409         MOV     A,#0x9
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
    463            {
    464            }
    465            else
    466            {
    467              // Error occurred in request to send.
    468            }
    469          }
   \   000058   7401         MOV     A,#0x1
   \   00005A   80..         SJMP    ??Subroutine2_0
    470          //µã²¥·¢ËÍº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          void SampleApp_SendPointToPointMessage(void)
   \                     SampleApp_SendPointToPointMessage:
    472          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    473            unsigned char data[14] = "Hello Seanoy\r\n";//·¢ËÍµÄÊý¾Ý
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "Hello Seanoy\\r\\n">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "Hello Seanoy\\r\\n">` & 0xff
   \   00001A   740E         MOV     A,#0xe
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    474            if(AF_DataRequest ( &SampleAPP_Point_To_Point_DstAddr,//Ç°Ãæ¶¨ÒåµÄÉè±¸µØÖ·½á¹¹Ìå
    475                                &SampleApp_epDesc,//default
    476                                SAMPLEAPP_POINT_TO_POINT_CLUSTERID,//Õâ¸ö´«Êä±àºÅºê¶¨ÒåÐèÒªÔÚSampleApp.hÄÚ²¿Ìí¼Ó
    477                                14,//·¢ËÍµÄÊý¾ÝÊý
    478                                data,//Êý¾ÝÖ¸Õë
    479                                &SampleApp_TransID,//default
    480                                AF_DISCV_ROUTE,//default
    481                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )//default
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..0E       MOV     ?V0 + 0,#0xe
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..03       MOV     ?V0 + 0,#0x3
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7920         MOV     R1,#0x20
   \   000057   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000059   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#SampleAPP_Point_To_Point_DstAddr & 0xff
   \   00005D   7B..         MOV     R3,#(SampleAPP_Point_To_Point_DstAddr >> 8) & 0xff
   \   00005F   12....       LCALL   ??AF_DataRequest?relay
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    482            {
    483              //do nothing
    484            }
    485            else
    486            {
    487              // Error occurred in request to send.
    488            }
    489          }
   \   000067   740E         MOV     A,#0xe
   \   000069   80..         SJMP    ??Subroutine2_0
    490          /*********************************************************************
    491           * @fn      SampleApp_SendFlashMessage
    492           *
    493           * @brief   Send the flash message to group 1.
    494           *
    495           * @param   flashTime - in milliseconds
    496           *
    497           * @return  none
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    500          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    501            uint8 buffer[3];
    502            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    503            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    504            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    505          
    506            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    507                                 SAMPLEAPP_FLASH_CLUSTERID,
    508                                 3,
    509                                 buffer,
    510                                 &SampleApp_TransID,
    511                                 AF_DISCV_ROUTE,
    512                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    513            {
    514            }
    515            else
    516            {
    517              // Error occurred in request to send.
    518            }
    519          }
   \   000071   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD Broadcast"
   \            42726F61
   \            64636173
   \            7400    

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "rssi:">`:
   \   000000   72737369     DB "rssi:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "     ">`:
   \   000000   20202020     DB "     "
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello Seanoy\\r\\n">`:
   \   000000   48656C6C     DB 48H, 65H, 6CH, 6CH, 6FH, 20H, 53H, 65H
   \            6F205365
   \   000008   616E6F79     DB 61H, 6EH, 6FH, 79H, 0DH, 0AH
   \            0D0A    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD 4294967295

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7530:
   \   000000   30750000     DD 30000
    520          /*********************************************************************
    521          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay                              0      0     29
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             1      0     25
       -> HalUARTWrite                  0      0     26
       -> HalUARTWrite                  0      0     26
       -> HalUARTWrite                  0      0     26
       -> Delay                         0      0     26
       -> HalUARTWrite                  0      0     26
       -> HalLedBlink                   0      0     26
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     32
       -> AF_DataRequest                0      0     40
     SampleApp_SendPointToPointMessage
                                        2      0     33
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     AppTitle                                    14
     SampleApp_ClusterList                        4
     SampleApp_SimpleDesc                        12
     SampleApp_epDesc                             6
     SampleApp_TaskID                             1
     SampleApp_NwkState                           1
     SampleApp_TransID                            1
     SampleApp_Periodic_DstAddr                  12
     SampleApp_Flash_DstAddr                     12
     SampleAPP_Point_To_Point_DstAddr
                                                 12
     SampleApp_Group                             18
     SampleAppPeriodicCounter                     1
     SampleAppFlashCounter                        1
     SampleApp_Init                             198
     SampleApp_ProcessEvent                     176
     SampleApp_HandleKeys                        62
     ??Subroutine3_0                              5
     Delay                                       48
     SampleApp_MessageMSGCB                     257
     ?Subroutine1                                12
     ?Subroutine0                                 2
     ??Subroutine2_0                              3
     SampleApp_SendPeriodicMessage               92
     SampleApp_SendPointToPointMessage
                                                107
     SampleApp_SendFlashMessage                 116
     ?<Initializer for AppTitle>                 14
     ??SampleApp_Init?relay                       6
     ??SampleApp_ProcessEvent?relay               6
     ??SampleApp_HandleKeys?relay                 6
     ??Delay?relay                                6
     ??SampleApp_MessageMSGCB?relay               6
     ??SampleApp_SendPeriodicMessage?relay        6
     ??SampleApp_SendPointToPointMessage?relay    6
     ??SampleApp_SendFlashMessage?relay           6
     ?<Constant "UartInit OK\n">                 13
     ?<Constant "Group 1">                        8
     ?<Constant "SampleApp">                     10
     ?<Constant "rssi:">                          6
     ?<Constant "     ">                          6
     ?<Constant "Hello Seanoy\r\n">              14
     __Constant_ffffffff                          4
     __Constant_7530                              4

 
 1 078 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    81 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 140 bytes of CODE  memory
    73 bytes of CONST memory (+ 8 bytes shared)
    79 bytes of XDATA memory

Errors: none
Warnings: 1
