###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Feb/2021  13:56:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\Source\SampleApp.c   #
#    Command line       =  -f C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ           #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\ABC\Desktop\ZigBee #
#                          ×éÍø\ZStack-2.5.1a\Projects\zstack\Samples\SampleA #
#                          pp\Source\SampleApp.c -D ZTOOL_P1 -D xMT_TASK -D   #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\ABC\Desktop\ZigBe #
#                          e×éÍø\ZStack-2.5.1a\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\CoordinatorEB\List\ -lA               #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB\List\ --diag_suppress Pe001,Pa010 -o            #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB\Obj\ -e --no_code_motion --debug --core=plain   #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\ABC\Desktop\ZigBe #
#                          e×éÍø\ZStack-2.5.1a\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\ -I C:\Users\ABC\Desktop\ZigBee×éÍø\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\Source\ -I C:\Users\ABC\Desktop\ZigBee×éÍ #
#                          ø\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\include\ -I                     #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\target\CC2530EB\ -I             #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\include\ -I                     #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\high_level\ -I                  #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\ -I             #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\single_chip\    #
#                          -I C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mt\ -I                           #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\ -I                    #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\af\ -I                        #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sapi\ -I                      #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sys\ -I                       #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\ -I                       #
#                          C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\ -I C:\Users\ABC\Desktop\ZigBe #
#                          e×éÍø\ZStack-2.5.1a\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\   #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB\List\SampleApp.lst                              #
#    Object file        =  C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\Coordinator #
#                          EB\Obj\SampleApp.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ABC\Desktop\ZigBee×éÍø\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h" 
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          uint8 AppTitle[] = "ALD Broadcast"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     94          uint8  SelfTd=0x02 ;//ÓÃ»§µÄID
   \                     SelfTd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for SelfTd>`
   \   000001                REQUIRE __INIT_XDATA_I
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     98          {
     99            SAMPLEAPP_PERIODIC_CLUSTERID,
    100            SAMPLEAPP_FLASH_CLUSTERID
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr;//¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleAPP_Point_To_Point_DstAddr;//µã²¥
   \                     SampleAPP_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    153          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          void SampleApp_SendPeriodicMessage( void );
    155          void SampleApp_SendFlashMessage( uint16 flashTime );
    156          void SampleApp_SendPointToPointMessage( uint8 *SendID );
    157          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    158          void Delay(uint32 i);
    159          
    160          /*********************************************************************
    161           * NETWORK LAYER CALLBACKS
    162           */
    163          
    164          /*********************************************************************
    165           * PUBLIC FUNCTIONS
    166           */
    167          
    168          /*********************************************************************
    169           * @fn      SampleApp_Init
    170           *
    171           * @brief   Initialization function for the Generic App Task.
    172           *          This is called during initialization and should contain
    173           *          any application specific initialization (ie. hardware
    174           *          initialization/setup, table initialization, power up
    175           *          notificaiton ... ).
    176           *
    177           * @param   task_id - the ID assigned by OSAL.  This ID should be
    178           *                    used to send messages and set timers.
    179           *
    180           * @return  none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    183          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    184            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    185            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    186            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    187            
    188            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    189            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    190            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));//ÌáÊ¾ÐÅÏ¢
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0D         MOV     R4,#0xd
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    191            
    192            // Device hardware initialization can be added here or in main() (Zmain.c).
    193            // If the hardware is application specific - add it here.
    194            // If the hardware is other parts of the device add it in main().
    195          
    196           #if defined ( BUILD_ALL_DEVICES )
    197            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    198            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    199            // together - if they are - we will start up a coordinator. Otherwise,
    200            // the device will start as a router.
    201            if ( readCoordinatorJumper() )
    202              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    203            else
    204              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    205          #endif // BUILD_ALL_DEVICES
    206          
    207          #if defined ( HOLD_AUTO_START )
    208            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    209            //  from starting the device and wait for the application to
    210            //  start the device.
    211            ZDOInitDevice(0);
    212          #endif
    213          
    214            // Setup for the periodic message's destination address
    215            // Broadcast to everyone
    216            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
    217            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC     DPTR
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    218            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    219          
    220            // Setup for the flash command's destination address - Group 1
    221            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    222            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    223            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    224            
    225            //point to point 
    226            SampleAPP_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)afAddr16Bit;
   \   000050   90....       MOV     DPTR,#SampleAPP_Point_To_Point_DstAddr + 8
   \   000053   7402         MOV     A,#0x2
   \   000055   F0           MOVX    @DPTR,A
    227            SampleAPP_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000056   A3           INC     DPTR
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    228            SampleAPP_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;//·¢ËÍ¸øÐ­µ÷Æ÷
   \   00005A   90....       MOV     DPTR,#SampleAPP_Point_To_Point_DstAddr
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
    229            
    230            
    231            // Fill out the endpoint description.
    232            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000061   90....       MOV     DPTR,#SampleApp_epDesc
   \   000064   7414         MOV     A,#0x14
   \   000066   F0           MOVX    @DPTR,A
    233            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006E   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.simpleDesc
    235                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    236            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    237          
    238            // Register the endpoint description with the AF
    239            afRegister( &SampleApp_epDesc );
   \   00007A                ; Setup parameters for call to function afRegister
   \   00007A   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007C   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007E   12....       LCALL   ??afRegister?relay
    240          
    241            // Register for all key events - This app will handle all key events
    242            RegisterForKeys( SampleApp_TaskID );
   \   000081                ; Setup parameters for call to function RegisterForKeys
   \   000081   90....       MOV     DPTR,#SampleApp_TaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??RegisterForKeys?relay
    243          
    244            // By default, all devices start out in Group 1
    245            SampleApp_Group.ID = 0x0001;
   \   000089   90....       MOV     DPTR,#SampleApp_Group
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    246            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000095   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   7C07         MOV     R4,#0x7
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A5   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A7   12....       LCALL   ??osal_memcpy?relay
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    247            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AF                ; Setup parameters for call to function aps_AddGroup
   \   0000AF   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B1   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B3   7914         MOV     R1,#0x14
   \   0000B5   12....       LCALL   ??aps_AddGroup?relay
    248          
    249          #if defined ( LCD_SUPPORTED )
    250            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B8                ; Setup parameters for call to function HalLcdWriteString
   \   0000B8   7900         MOV     R1,#0x0
   \   0000BA   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BC   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BE   12....       LCALL   ??HalLcdWriteString?relay
    251          #endif
    252          }
   \   0000C1   7F03         MOV     R7,#0x3
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    253          
    254          /*********************************************************************
    255           * @fn      SampleApp_ProcessEvent
    256           *
    257           * @brief   Generic Application Task event processor.  This function
    258           *          is called to process all events for the task.  Events
    259           *          include timers, messages and any other user defined events.
    260           *
    261           * @param   task_id  - The OSAL assigned task ID.
    262           * @param   events - events to process.  This is a bit map and can
    263           *                   contain more than one event.
    264           *
    265           * @return  none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    268          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    269            afIncomingMSGPacket_t *MSGpkt;
    270            (void)task_id;  // Intentionally unreferenced parameter
    271          
    272            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    273            {
    274              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    275              while ( MSGpkt )
    276              {
    277                switch ( MSGpkt->hdr.event )
    278                {        
    279                  // Received when a key is pressed
    280                  case KEY_CHANGE:
    281                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    282                    break;
    283          
    284                  // Received when a messages is received (OTA) for this endpoint
    285                  case AF_INCOMING_MSG_CMD:
    286                    SampleApp_MessageMSGCB( MSGpkt );
    287                    break;
    288          
    289                  // Received whenever the device changes state in the network
    290                  case ZDO_STATE_CHANGE:
    291                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    292                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    293                           (SampleApp_NwkState == DEV_ROUTER)
    294                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    295                    {
    296                      // Start sending the periodic message in a regular interval.
    297                      osal_start_timerEx( SampleApp_TaskID,
    298                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    299                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CB8         MOV     R4,#-0x48
   \   000020   7D0B         MOV     R5,#0xb
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    300                    }
    301                    else
    302                    {
    303                      // Device is no longer in the network
    304                    }
    305                    break;
    306          
    307                  default:
    308                    break;
    309                }
    310          
    311                // Release the memory
    312                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    313          
    314                // Next - if one is available
    315                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    316              }
    317          
    318              // return unprocessed events
    319              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    320            }
    321          
    322            // Send a message out - This event is generated by a timer
    323            //  (setup in SampleApp_Init()).
    324            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )//¼ä¸ô·¢ËÍÏûÏ¢ÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    325            {
    326              // Send the periodic message£¬¹ã²¥
    327              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    328              //SampleApp_SendPointToPointMessage();µã²¥
    329          
    330              // Setup to send message again in normal period (+ a little jitter)
    331              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    332                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24B8         ADD     A,#-0x48
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   340B         ADDC    A,#0xb
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    333          
    334              // return unprocessed events
    335              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    336            }
    337          
    338            // Discard unknown events
    339            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          }
    341          
    342          /*********************************************************************
    343           * Event Generation Functions
    344           */
    345          /*********************************************************************
    346           * @fn      SampleApp_HandleKeys
    347           *
    348           * @brief   Handles all key events for this device.
    349           *
    350           * @param   shift - true if in shift/alt.
    351           * @param   keys - bit field for key events. Valid entries:
    352           *                 HAL_KEY_SW_2
    353           *                 HAL_KEY_SW_1
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    358          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    359            (void)shift;  // Intentionally unreferenced parameter
    360            
    361            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    362            {
    363              /* This key sends the Flash Command is sent to Group 1.
    364               * This device will not receive the Flash Command from this
    365               * device (even if it belongs to group 1).
    366               */
    367              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    368            }
    369          
    370            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    371            {
    372              /* The Flashr Command is sent to Group 1.
    373               * This key toggles this device in and out of group 1.
    374               * If this device doesn't belong to group 1, this application
    375               * will not receive the Flash command sent to group 1.
    376               */
    377              aps_Group_t *grp;
    378              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    379              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    380              {
    381                // Remove from the group
    382                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    383              }
    384              else
    385              {
    386                // Add to the flash group
    387                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    388              }
    389            }
    390          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void Delay(uint32 i)
   \                     Delay:
    393          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    394            while(i--);
   \                     ??Delay_0:
   \   00000D   85....       MOV     ?V0 + 4,?V0 + 0
   \   000010   85....       MOV     ?V0 + 5,?V0 + 1
   \   000013   85....       MOV     ?V0 + 6,?V0 + 2
   \   000016   85....       MOV     ?V0 + 7,?V0 + 3
   \   000019   90....       MOV     DPTR,#__Constant_ffffffff
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?L_ADD_X
   \   000021   E5..         MOV     A,?V0 + 4
   \   000023   45..         ORL     A,?V0 + 5
   \   000025   45..         ORL     A,?V0 + 6
   \   000027   45..         ORL     A,?V0 + 7
   \   000029   70E2         JNZ     ??Delay_0
    395          }
   \   00002B   7F08         MOV     R7,#0x8
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    396          /*********************************************************************
    397           * LOCAL FUNCTIONS
    398           */
    399          
    400          /*********************************************************************
    401           * @fn      SampleApp_MessageMSGCB
    402           *
    403           * @brief   Data message processor callback.  This function processes
    404           *          any incoming data - probably from other devices.  So, based
    405           *          on cluster ID, perform the intended action.
    406           *
    407           * @param   none
    408           *
    409           * @return  none
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt ) //½ÓÊÕÊý¾Ý
   \                     SampleApp_MessageMSGCB:
    412          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    413            uint16 flashTime;
    414            int8 count;
                        ^
Warning[Pe177]: variable "count" was declared but never referenced
    415            int8 rssi_buf[3];
                        ^
Warning[Pe177]: variable "rssi_buf" was declared but never referenced
    416            uint8 Send[2];//ÓÃÓÚ½ÓÊÕÁ¬¸ö½Ó´¥ÓÃ»§µÄID£¬SampleApp_SendPointToPointMessage()µÄ²ÎÊý
                         ^
Warning[Pe177]: variable "Send" was declared but never referenced
    417            uint8 DataFrame[5];//Ð­µ÷Æ÷´«Êäµ½´®¿ÚµÄÊý¾ÝÖ¡
    418            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001E   0200         DW        2
   \   000020   01           DB        1
   \   000021   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000023   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_2
    419            {
    420              case SAMPLEAPP_PERIODIC_CLUSTERID://ÊÕµ½¹ã²¥Êý¾Ý
    421                //count=~(pkt->rssi-1);//×ª»»ÎªÔ­Âë
    422                //rssi_buf[0]='-';//ÐÅºÅÇ¿¶ÈÒ»¶¨Îª¸ºÊý
    423               // rssi_buf[1]=count/10+0x30;
    424                //rssi_buf[2]=count%10+0x30;
    425                //HalUARTWrite(0,"rssi:",5);
    426                //HalUARTWrite(0,rssi_buf,3); 
    427                //HalUARTWrite(0,"     ",5); 
    428                //if(count<30)//µ±½Ó½üµ½·Ç°²È«¾àÀë
    429                //{
    430                 //  Delay(30000);//ÊÇ·ñÍ£Áô
    431                  // if(count<30)
    432                  // {
    433                    // Send[0]=SelfTd;//×Ô¼ºÓÃ»§ID
    434                    // Send[1]=pkt->cmd.Data[0];//½Ó´¥µÄÓÃ»§ID
    435                    // SampleApp_SendPointToPointMessage(Send);//µã²¥·½Ê½·¢¸øÐ­µ÷Æ÷
    436                    // HalUARTWrite(0, Send,2); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý,µ÷ÊÔÓÃ
    437                   //}
    438                //}
    439                break;
    440              case SAMPLEAPP_FLASH_CLUSTERID:     //ÊÕµ½×é²¥Êý¾Ý£¬´ËÊµÑéÃ»ÓÐÊ¹ÓÃ£¬µ½ºóÃæÊµÑéÏê½â
    441                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    442                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   000027   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E                ; Setup parameters for call to function HalLedBlink
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   2400         ADD     A,#0x0
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   E4           CLR     A
   \   000043   39           ADDC    A,R1
   \   000044   F5..         MOV     ?V0 + 1,A
   \   000046   7402         MOV     A,#0x2
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?US_SHR
   \   00004D   AC..         MOV     R4,?V0 + 0
   \   00004F   AD..         MOV     R5,?V0 + 1
   \   000051   7B32         MOV     R3,#0x32
   \   000053   7A04         MOV     R2,#0x4
   \   000055   7908         MOV     R1,#0x8
   \   000057   12....       LCALL   ??HalLedBlink?relay
    443                break;
   \   00005A   8066         SJMP    ??SampleApp_MessageMSGCB_0
    444            case  SAMPLEAPP_POINT_TO_POINT_CLUSTERID ://µã²¥,Ð­µ÷Æ÷ÊÕµ½µã²¥ÊÇÊý¾Ý½«·¢À´ÊÇÊý¾Ý½ÚµãID¼Ó½Ó´¥µÄID´ò°üÊä³öµ½´®¿Ú
    445                DataFrame[0]=0xFF;
   \                     ??SampleApp_MessageMSGCB_2:
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   74FF         MOV     A,#-0x1
   \   000064   F0           MOVX    @DPTR,A
    446                DataFrame[1]=0xFE;
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   74FE         MOV     A,#-0x2
   \   00006C   F0           MOVX    @DPTR,A
    447                DataFrame[2]=pkt->cmd.Data[0];
   \   00006D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F583         MOV     DPH,A
   \   000075   8A82         MOV     DPL,R2
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C0E0         PUSH    A
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
    448                DataFrame[3]=pkt->cmd.Data[1];
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F583         MOV     DPH,A
   \   00008C   8882         MOV     DPL,R0
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C0E0         PUSH    A
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
    449                DataFrame[4]=0xAA;
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   74AA         MOV     A,#-0x56
   \   0000A1   F0           MOVX    @DPTR,A
    450                HalUARTWrite(0,DataFrame,5);
   \   0000A2                ; Setup parameters for call to function HalUARTWrite
   \   0000A2   7C05         MOV     R4,#0x5
   \   0000A4   7D00         MOV     R5,#0x0
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   AA82         MOV     R2,DPL
   \   0000AE   AB83         MOV     R3,DPH
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   12....       LCALL   ??HalUARTWrite?relay
    451                HalUARTWrite(0,"\n\r",2);
   \   0000B5                ; Setup parameters for call to function HalUARTWrite
   \   0000B5   7C02         MOV     R4,#0x2
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   7A..         MOV     R2,#`?<Constant "\\n\\r">` & 0xff
   \   0000BB   7B..         MOV     R3,#(`?<Constant "\\n\\r">` >> 8) & 0xff
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   12....       LCALL   ??HalUARTWrite?relay
    452                break;
    453            }
    454          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   80..         SJMP    ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F8           MOV     R0,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0
    455          
    456          /*********************************************************************
    457           * @fn      SampleApp_SendPeriodicMessage
    458           *
    459           * @brief   Send the periodic message.
    460           *
    461           * @param   none
    462           *
    463           * @return  none
    464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005                REQUIRE ??Subroutine2_0
   \   000005                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          void SampleApp_SendPeriodicMessage( void )//ÖÜÆÚ·¢ËÍº¯Êý£¬ÓÃÓÚ¹ã²¥
   \                     SampleApp_SendPeriodicMessage:
    466          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    467            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    468                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    469                                 1,
    470                                 &SelfTd,
    471                                 &SampleApp_TransID,
    472                                 AF_DISCV_ROUTE,
    473                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SelfTd & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SelfTd >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   80..         SJMP    ?Subroutine0
    474            {
    475            }
    476            else
    477            {
    478              // Error occurred in request to send.
    479            }
    480          }
    481          //µã²¥·¢ËÍº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void SampleApp_SendPointToPointMessage( uint8 *SendID )
   \                     SampleApp_SendPointToPointMessage:
    483          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    484            
    485            if(AF_DataRequest ( &SampleAPP_Point_To_Point_DstAddr,//Ç°Ãæ¶¨ÒåµÄÉè±¸µØÖ·½á¹¹Ìå
    486                                &SampleApp_epDesc,//default
    487                                SAMPLEAPP_POINT_TO_POINT_CLUSTERID,//Õâ¸ö´«Êä±àºÅºê¶¨ÒåÐèÒªÔÚSampleApp.hÄÚ²¿Ìí¼Ó
    488                                2,//·¢ËÍµÄÊý¾ÝÊý
    489                                SendID,//Êý¾ÝÖ¸Õë
    490                                &SampleApp_TransID,//default
    491                                AF_DISCV_ROUTE,//default
    492                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )//default
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0 + 0,R2
   \   00001A   8B..         MOV     ?V0 + 1,R3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV     ?V0 + 0,#0x2
   \   000024   75..00       MOV     ?V0 + 1,#0x0
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..03       MOV     ?V0 + 0,#0x3
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7920         MOV     R1,#0x20
   \   000036   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000038   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003A   7A..         MOV     R2,#SampleAPP_Point_To_Point_DstAddr & 0xff
   \   00003C   7B..         MOV     R3,#(SampleAPP_Point_To_Point_DstAddr >> 8) & 0xff
   \   00003E   02....       LJMP    ?Subroutine0 & 0xFFFF
    493            {
    494              //do nothing
    495            }
    496            else
    497            {
    498              // Error occurred in request to send.
    499            }
    500          }
    501          /*********************************************************************
    502           * @fn      SampleApp_SendFlashMessage
    503           *
    504           * @brief   Send the flash message to group 1.
    505           *
    506           * @param   flashTime - in milliseconds
    507           *
    508           * @return  none
    509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    511          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    512            uint8 buffer[3];
    513            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    514            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    515            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    516          
    517            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    518                                 SAMPLEAPP_FLASH_CLUSTERID,
    519                                 3,
    520                                 buffer,
    521                                 &SampleApp_TransID,
    522                                 AF_DISCV_ROUTE,
    523                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    524            {
    525            }
    526            else
    527            {
    528              // Error occurred in request to send.
    529            }
    530          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ??Subroutine2_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD Broadcast"
   \            42726F61
   \            64636173
   \            7400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SelfTd>`:
   \   000000   02           DB 2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n\\r">`:
   \   000000   0A0D00       DB "\012\015"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD 4294967295
    531          /*********************************************************************
    532          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay                              0      0     16
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             1      0     27
       -> HalLedBlink                   0      0     30
       -> HalUARTWrite                  0      0     30
       -> HalUARTWrite                  0      0     30
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SendPointToPointMessage
                                        0      0     19
       -> AF_DataRequest                0      0     38


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     AppTitle                                    14
     SelfTd                                       1
     SampleApp_ClusterList                        4
     SampleApp_SimpleDesc                        12
     SampleApp_epDesc                             6
     SampleApp_TaskID                             1
     SampleApp_NwkState                           1
     SampleApp_TransID                            1
     SampleApp_Periodic_DstAddr                  12
     SampleApp_Flash_DstAddr                     12
     SampleAPP_Point_To_Point_DstAddr
                                                 12
     SampleApp_Group                             18
     SampleAppPeriodicCounter                     1
     SampleAppFlashCounter                        1
     SampleApp_Init                             198
     SampleApp_ProcessEvent                     176
     SampleApp_HandleKeys                        62
     ??Subroutine3_0                              5
     Delay                                       48
     SampleApp_MessageMSGCB                     198
     ?Subroutine1                                14
     ??Subroutine2_0                              3
     ?Subroutine0                                 5
     SampleApp_SendPeriodicMessage               63
     SampleApp_SendPointToPointMessage
                                                 65
     SampleApp_SendFlashMessage                 118
     ?<Initializer for AppTitle>                 14
     ?<Initializer for SelfTd>                    1
     ??SampleApp_Init?relay                       6
     ??SampleApp_ProcessEvent?relay               6
     ??SampleApp_HandleKeys?relay                 6
     ??Delay?relay                                6
     ??SampleApp_MessageMSGCB?relay               6
     ??SampleApp_SendPeriodicMessage?relay        6
     ??SampleApp_SendPointToPointMessage?relay    6
     ??SampleApp_SendFlashMessage?relay           6
     ?<Constant "UartInit OK\n">                 13
     ?<Constant "Group 1">                        8
     ?<Constant "SampleApp">                     10
     ?<Constant "\n\r">                           3
     __Constant_ffffffff                          4

 
 955 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
  15 bytes in segment XDATA_I
  15 bytes in segment XDATA_ID
  54 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 1 018 bytes of CODE  memory
    50 bytes of CONST memory (+ 4 bytes shared)
    80 bytes of XDATA memory

Errors: none
Warnings: 3
